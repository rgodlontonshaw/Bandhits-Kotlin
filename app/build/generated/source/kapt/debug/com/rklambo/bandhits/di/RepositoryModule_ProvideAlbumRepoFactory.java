// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.rklambo.bandhits.data.lastfm.LastFmService;
import com.rklambo.bandhits.domain.repository.AlbumRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class RepositoryModule_ProvideAlbumRepoFactory implements Factory<AlbumRepository> {
  private final RepositoryModule module;

  private final Provider<LastFmService> lastFmServiceProvider;

  public RepositoryModule_ProvideAlbumRepoFactory(
      RepositoryModule module, Provider<LastFmService> lastFmServiceProvider) {
    this.module = module;
    this.lastFmServiceProvider = lastFmServiceProvider;
  }

  @Override
  public AlbumRepository get() {
    return Preconditions.checkNotNull(
        module.provideAlbumRepo(lastFmServiceProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static RepositoryModule_ProvideAlbumRepoFactory create(
      RepositoryModule module, Provider<LastFmService> lastFmServiceProvider) {
    return new RepositoryModule_ProvideAlbumRepoFactory(module, lastFmServiceProvider);
  }

  public static AlbumRepository proxyProvideAlbumRepo(
      RepositoryModule instance, LastFmService lastFmService) {
    return Preconditions.checkNotNull(
        instance.provideAlbumRepo(lastFmService),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
