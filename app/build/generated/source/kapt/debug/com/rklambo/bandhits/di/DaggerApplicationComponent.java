// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import android.content.Context;
import android.support.v7.widget.LinearLayoutManager;
import com.birbit.android.jobqueue.JobManager;
import com.rklambo.bandhits.data.lastfm.LastFmRequestInterceptor;
import com.rklambo.bandhits.data.lastfm.LastFmService;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityComponent;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideAlbumDataMapperFactory;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideAlbumPresenterFactory;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideAlbumViewFactory;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideLinearLayoutManagerFactory;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideTrackDataMapperFactory;
import com.rklambo.bandhits.di.subcomponent.album.AlbumActivityModule_ProvideTracksAdapterFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityComponent;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideActivityPresenterFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideAlbumsFragmentFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideArtistDataMapperFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideArtistViewFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideBiographyFragmentFactory;
import com.rklambo.bandhits.di.subcomponent.detail.ArtistActivityModule_ProvideImageTitleDataMapperFactory;
import com.rklambo.bandhits.di.subcomponent.main.MainActivityComponent;
import com.rklambo.bandhits.di.subcomponent.main.MainActivityModule;
import com.rklambo.bandhits.di.subcomponent.main.MainActivityModule_ProvideImageTitleMapperFactory;
import com.rklambo.bandhits.di.subcomponent.main.MainActivityModule_ProvideMainPresenterFactory;
import com.rklambo.bandhits.di.subcomponent.main.MainActivityModule_ProvideMainViewFactory;
import com.rklambo.bandhits.domain.interactor.base.Bus;
import com.rklambo.bandhits.domain.interactor.base.InteractorExecutor;
import com.rklambo.bandhits.domain.repository.AlbumRepository;
import com.rklambo.bandhits.domain.repository.ArtistRepository;
import com.rklambo.bandhits.ui.adapter.TracksAdapter;
import com.rklambo.bandhits.ui.entity.mapper.AlbumDetailDataMapper;
import com.rklambo.bandhits.ui.entity.mapper.ArtistDetailDataMapper;
import com.rklambo.bandhits.ui.entity.mapper.ImageTitleDataMapper;
import com.rklambo.bandhits.ui.entity.mapper.TrackDataMapper;
import com.rklambo.bandhits.ui.presenter.AlbumPresenter;
import com.rklambo.bandhits.ui.presenter.ArtistPresenter;
import com.rklambo.bandhits.ui.presenter.MainPresenter;
import com.rklambo.bandhits.ui.screens.album.AlbumActivity;
import com.rklambo.bandhits.ui.screens.album.AlbumActivity_MembersInjector;
import com.rklambo.bandhits.ui.screens.detail.AlbumsFragment;
import com.rklambo.bandhits.ui.screens.detail.ArtistActivity;
import com.rklambo.bandhits.ui.screens.detail.ArtistActivity_MembersInjector;
import com.rklambo.bandhits.ui.screens.detail.BiographyFragment;
import com.rklambo.bandhits.ui.screens.main.MainActivity;
import com.rklambo.bandhits.ui.screens.main.MainActivity_MembersInjector;
import com.rklambo.bandhits.ui.view.AlbumView;
import com.rklambo.bandhits.ui.view.ArtistView;
import com.rklambo.bandhits.ui.view.MainView;
import com.squareup.picasso.Picasso;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<Bus> provideBusProvider;

  private Provider<String> provideLanguageSelectionProvider;

  private Provider<Context> provideApplicationContextProvider;

  private Provider<Cache> provideCacheProvider;

  private Provider<String> provideApiKeyProvider;

  private Provider<Integer> provideCacheDurationProvider;

  private Provider<LastFmRequestInterceptor> provideRequestInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRestAdapterProvider;

  private Provider<LastFmService> providesLastFmServiceProvider;

  private Provider<ArtistRepository> provideArtistRepoProvider;

  private DomainModule_ProvideRecommendedArtistsInteractorFactory
      provideRecommendedArtistsInteractorProvider;

  private Provider<JobManager> provideJobManagerProvider;

  private Provider<InteractorExecutor> provideInteractorExecutorProvider;

  private DomainModule_ProvideArtistDetailInteractorFactory provideArtistDetailInteractorProvider;

  private Provider<AlbumRepository> provideAlbumRepoProvider;

  private DomainModule_ProvideTopAlbumsInteractorFactory provideTopAlbumsInteractorProvider;

  private Provider<Picasso> providePicassoProvider;

  private DomainModule_ProvideAlbumsDetailInteractorFactory provideAlbumsDetailInteractorProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideBusProvider =
        DoubleCheck.provider(ApplicationModule_ProvideBusFactory.create(builder.applicationModule));
    this.provideLanguageSelectionProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideLanguageSelectionFactory.create(builder.applicationModule));
    this.provideApplicationContextProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideApplicationContextFactory.create(builder.applicationModule));
    this.provideCacheProvider =
        DoubleCheck.provider(
            DataModule_ProvideCacheFactory.create(
                builder.dataModule, provideApplicationContextProvider));
    this.provideApiKeyProvider =
        DoubleCheck.provider(
            DataModule_ProvideApiKeyFactory.create(
                builder.dataModule, provideApplicationContextProvider));
    this.provideCacheDurationProvider =
        DoubleCheck.provider(
            DataModule_ProvideCacheDurationFactory.create(
                builder.dataModule, provideApplicationContextProvider));
    this.provideRequestInterceptorProvider =
        DoubleCheck.provider(
            DataModule_ProvideRequestInterceptorFactory.create(
                builder.dataModule, provideApiKeyProvider, provideCacheDurationProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            DataModule_ProvideOkHttpClientFactory.create(
                builder.dataModule, provideCacheProvider, provideRequestInterceptorProvider));
    this.provideRestAdapterProvider =
        DoubleCheck.provider(
            DataModule_ProvideRestAdapterFactory.create(
                builder.dataModule, provideOkHttpClientProvider));
    this.providesLastFmServiceProvider =
        DoubleCheck.provider(
            DataModule_ProvidesLastFmServiceFactory.create(
                builder.dataModule, provideRestAdapterProvider));
    this.provideArtistRepoProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvideArtistRepoFactory.create(
                builder.repositoryModule,
                provideLanguageSelectionProvider,
                providesLastFmServiceProvider));
    this.provideRecommendedArtistsInteractorProvider =
        DomainModule_ProvideRecommendedArtistsInteractorFactory.create(
            builder.domainModule, provideArtistRepoProvider);
    this.provideJobManagerProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideJobManagerFactory.create(
                builder.applicationModule, provideApplicationContextProvider));
    this.provideInteractorExecutorProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideInteractorExecutorFactory.create(
                builder.applicationModule, provideJobManagerProvider, provideBusProvider));
    this.provideArtistDetailInteractorProvider =
        DomainModule_ProvideArtistDetailInteractorFactory.create(
            builder.domainModule, provideArtistRepoProvider);
    this.provideAlbumRepoProvider =
        DoubleCheck.provider(
            RepositoryModule_ProvideAlbumRepoFactory.create(
                builder.repositoryModule, providesLastFmServiceProvider));
    this.provideTopAlbumsInteractorProvider =
        DomainModule_ProvideTopAlbumsInteractorFactory.create(
            builder.domainModule, provideAlbumRepoProvider);
    this.providePicassoProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvidePicassoFactory.create(
                builder.applicationModule, provideApplicationContextProvider));
    this.provideAlbumsDetailInteractorProvider =
        DomainModule_ProvideAlbumsDetailInteractorFactory.create(
            builder.domainModule, provideAlbumRepoProvider);
  }

  @Override
  public MainActivityComponent plus(MainActivityModule module) {
    return new MainActivityComponentImpl(module);
  }

  @Override
  public ArtistActivityComponent plus(ArtistActivityModule module) {
    return new ArtistActivityComponentImpl(module);
  }

  @Override
  public AlbumActivityComponent plus(AlbumActivityModule module) {
    return new AlbumActivityComponentImpl(module);
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private DataModule dataModule;

    private RepositoryModule repositoryModule;

    private DomainModule domainModule;

    private Builder() {}

    public ApplicationComponent build() {
      if (applicationModule == null) {
        throw new IllegalStateException(
            ApplicationModule.class.getCanonicalName() + " must be set");
      }
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      if (domainModule == null) {
        this.domainModule = new DomainModule();
      }
      return new DaggerApplicationComponent(this);
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }
  }

  private final class MainActivityComponentImpl implements MainActivityComponent {
    private final MainActivityModule mainActivityModule;

    private Provider<MainView> provideMainViewProvider;

    private Provider<ImageTitleDataMapper> provideImageTitleMapperProvider;

    private Provider<MainPresenter> provideMainPresenterProvider;

    private MainActivityComponentImpl(MainActivityModule mainActivityModule) {
      this.mainActivityModule = Preconditions.checkNotNull(mainActivityModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideMainViewProvider =
          DoubleCheck.provider(
              MainActivityModule_ProvideMainViewFactory.create(mainActivityModule));
      this.provideImageTitleMapperProvider =
          DoubleCheck.provider(
              MainActivityModule_ProvideImageTitleMapperFactory.create(mainActivityModule));
      this.provideMainPresenterProvider =
          DoubleCheck.provider(
              MainActivityModule_ProvideMainPresenterFactory.create(
                  mainActivityModule,
                  provideMainViewProvider,
                  DaggerApplicationComponent.this.provideBusProvider,
                  DaggerApplicationComponent.this.provideRecommendedArtistsInteractorProvider,
                  DaggerApplicationComponent.this.provideInteractorExecutorProvider,
                  provideImageTitleMapperProvider));
    }

    @Override
    public void injectTo(MainActivity activity) {
      injectMainActivity(activity);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectPresenter(instance, provideMainPresenterProvider.get());
      return instance;
    }
  }

  private final class ArtistActivityComponentImpl implements ArtistActivityComponent {
    private final ArtistActivityModule artistActivityModule;

    private Provider<ArtistView> provideArtistViewProvider;

    private Provider<ArtistDetailDataMapper> provideArtistDataMapperProvider;

    private Provider<ImageTitleDataMapper> provideImageTitleDataMapperProvider;

    private Provider<ArtistPresenter> provideActivityPresenterProvider;

    private Provider<BiographyFragment> provideBiographyFragmentProvider;

    private Provider<AlbumsFragment> provideAlbumsFragmentProvider;

    private ArtistActivityComponentImpl(ArtistActivityModule artistActivityModule) {
      this.artistActivityModule = Preconditions.checkNotNull(artistActivityModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideArtistViewProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideArtistViewFactory.create(artistActivityModule));
      this.provideArtistDataMapperProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideArtistDataMapperFactory.create(artistActivityModule));
      this.provideImageTitleDataMapperProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideImageTitleDataMapperFactory.create(artistActivityModule));
      this.provideActivityPresenterProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideActivityPresenterFactory.create(
                  artistActivityModule,
                  provideArtistViewProvider,
                  DaggerApplicationComponent.this.provideBusProvider,
                  DaggerApplicationComponent.this.provideArtistDetailInteractorProvider,
                  DaggerApplicationComponent.this.provideTopAlbumsInteractorProvider,
                  DaggerApplicationComponent.this.provideInteractorExecutorProvider,
                  provideArtistDataMapperProvider,
                  provideImageTitleDataMapperProvider));
      this.provideBiographyFragmentProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideBiographyFragmentFactory.create(artistActivityModule));
      this.provideAlbumsFragmentProvider =
          DoubleCheck.provider(
              ArtistActivityModule_ProvideAlbumsFragmentFactory.create(artistActivityModule));
    }

    @Override
    public void injectTo(ArtistActivity activity) {
      injectArtistActivity(activity);
    }

    private ArtistActivity injectArtistActivity(ArtistActivity instance) {
      ArtistActivity_MembersInjector.injectPresenter(
          instance, provideActivityPresenterProvider.get());
      ArtistActivity_MembersInjector.injectPicasso(
          instance, DaggerApplicationComponent.this.providePicassoProvider.get());
      ArtistActivity_MembersInjector.injectBiographyFragment(
          instance, provideBiographyFragmentProvider.get());
      ArtistActivity_MembersInjector.injectAlbumsFragment(
          instance, provideAlbumsFragmentProvider.get());
      return instance;
    }
  }

  private final class AlbumActivityComponentImpl implements AlbumActivityComponent {
    private final AlbumActivityModule albumActivityModule;

    private Provider<AlbumView> provideAlbumViewProvider;

    private Provider<AlbumDetailDataMapper> provideAlbumDataMapperProvider;

    private Provider<AlbumPresenter> provideAlbumPresenterProvider;

    private Provider<TrackDataMapper> provideTrackDataMapperProvider;

    private Provider<TracksAdapter> provideTracksAdapterProvider;

    private Provider<Context> provideActiviyContextProvider;

    private Provider<LinearLayoutManager> provideLinearLayoutManagerProvider;

    private AlbumActivityComponentImpl(AlbumActivityModule albumActivityModule) {
      this.albumActivityModule = Preconditions.checkNotNull(albumActivityModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideAlbumViewProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideAlbumViewFactory.create(albumActivityModule));
      this.provideAlbumDataMapperProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideAlbumDataMapperFactory.create(albumActivityModule));
      this.provideAlbumPresenterProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideAlbumPresenterFactory.create(
                  albumActivityModule,
                  provideAlbumViewProvider,
                  DaggerApplicationComponent.this.provideBusProvider,
                  DaggerApplicationComponent.this.provideAlbumsDetailInteractorProvider,
                  DaggerApplicationComponent.this.provideInteractorExecutorProvider,
                  provideAlbumDataMapperProvider));
      this.provideTrackDataMapperProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideTrackDataMapperFactory.create(albumActivityModule));
      this.provideTracksAdapterProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideTracksAdapterFactory.create(albumActivityModule));
      this.provideActiviyContextProvider =
          DoubleCheck.provider(
              ActivityModule_ProvideActiviyContextFactory.create(albumActivityModule));
      this.provideLinearLayoutManagerProvider =
          DoubleCheck.provider(
              AlbumActivityModule_ProvideLinearLayoutManagerFactory.create(
                  albumActivityModule, provideActiviyContextProvider));
    }

    @Override
    public void injectTo(AlbumActivity activity) {
      injectAlbumActivity(activity);
    }

    private AlbumActivity injectAlbumActivity(AlbumActivity instance) {
      AlbumActivity_MembersInjector.injectPresenter(instance, provideAlbumPresenterProvider.get());
      AlbumActivity_MembersInjector.injectTrackDataMapper(
          instance, provideTrackDataMapperProvider.get());
      AlbumActivity_MembersInjector.injectAdapter(instance, provideTracksAdapterProvider.get());
      AlbumActivity_MembersInjector.injectLayoutManager(
          instance, provideLinearLayoutManagerProvider.get());
      AlbumActivity_MembersInjector.injectPicasso(
          instance, DaggerApplicationComponent.this.providePicassoProvider.get());
      return instance;
    }
  }
}
