// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.rklambo.bandhits.domain.interactor.GetRecommendedArtistsInteractor;
import com.rklambo.bandhits.domain.repository.ArtistRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DomainModule_ProvideRecommendedArtistsInteractorFactory
    implements Factory<GetRecommendedArtistsInteractor> {
  private final DomainModule module;

  private final Provider<ArtistRepository> artistRepositoryProvider;

  public DomainModule_ProvideRecommendedArtistsInteractorFactory(
      DomainModule module, Provider<ArtistRepository> artistRepositoryProvider) {
    this.module = module;
    this.artistRepositoryProvider = artistRepositoryProvider;
  }

  @Override
  public GetRecommendedArtistsInteractor get() {
    return Preconditions.checkNotNull(
        module.provideRecommendedArtistsInteractor(artistRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DomainModule_ProvideRecommendedArtistsInteractorFactory create(
      DomainModule module, Provider<ArtistRepository> artistRepositoryProvider) {
    return new DomainModule_ProvideRecommendedArtistsInteractorFactory(
        module, artistRepositoryProvider);
  }

  public static GetRecommendedArtistsInteractor proxyProvideRecommendedArtistsInteractor(
      DomainModule instance, ArtistRepository artistRepository) {
    return Preconditions.checkNotNull(
        instance.provideRecommendedArtistsInteractor(artistRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
