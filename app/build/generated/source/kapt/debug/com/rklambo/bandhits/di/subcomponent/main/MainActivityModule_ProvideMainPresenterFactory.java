// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di.subcomponent.main;

import com.rklambo.bandhits.domain.interactor.GetRecommendedArtistsInteractor;
import com.rklambo.bandhits.domain.interactor.base.Bus;
import com.rklambo.bandhits.domain.interactor.base.InteractorExecutor;
import com.rklambo.bandhits.ui.entity.mapper.ImageTitleDataMapper;
import com.rklambo.bandhits.ui.presenter.MainPresenter;
import com.rklambo.bandhits.ui.view.MainView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainActivityModule_ProvideMainPresenterFactory
    implements Factory<MainPresenter> {
  private final MainActivityModule module;

  private final Provider<MainView> viewProvider;

  private final Provider<Bus> busProvider;

  private final Provider<GetRecommendedArtistsInteractor> recommendedArtistsInteractorProvider;

  private final Provider<InteractorExecutor> interactorExecutorProvider;

  private final Provider<ImageTitleDataMapper> imageMapperProvider;

  public MainActivityModule_ProvideMainPresenterFactory(
      MainActivityModule module,
      Provider<MainView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetRecommendedArtistsInteractor> recommendedArtistsInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<ImageTitleDataMapper> imageMapperProvider) {
    this.module = module;
    this.viewProvider = viewProvider;
    this.busProvider = busProvider;
    this.recommendedArtistsInteractorProvider = recommendedArtistsInteractorProvider;
    this.interactorExecutorProvider = interactorExecutorProvider;
    this.imageMapperProvider = imageMapperProvider;
  }

  @Override
  public MainPresenter get() {
    return Preconditions.checkNotNull(
        module.provideMainPresenter(
            viewProvider.get(),
            busProvider.get(),
            recommendedArtistsInteractorProvider.get(),
            interactorExecutorProvider.get(),
            imageMapperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static MainActivityModule_ProvideMainPresenterFactory create(
      MainActivityModule module,
      Provider<MainView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetRecommendedArtistsInteractor> recommendedArtistsInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<ImageTitleDataMapper> imageMapperProvider) {
    return new MainActivityModule_ProvideMainPresenterFactory(
        module,
        viewProvider,
        busProvider,
        recommendedArtistsInteractorProvider,
        interactorExecutorProvider,
        imageMapperProvider);
  }

  public static MainPresenter proxyProvideMainPresenter(
      MainActivityModule instance,
      MainView view,
      Bus bus,
      GetRecommendedArtistsInteractor recommendedArtistsInteractor,
      InteractorExecutor interactorExecutor,
      ImageTitleDataMapper imageMapper) {
    return Preconditions.checkNotNull(
        instance.provideMainPresenter(
            view, bus, recommendedArtistsInteractor, interactorExecutor, imageMapper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
