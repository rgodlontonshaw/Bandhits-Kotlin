// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.rklambo.bandhits.domain.interactor.GetArtistDetailInteractor;
import com.rklambo.bandhits.domain.repository.ArtistRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DomainModule_ProvideArtistDetailInteractorFactory
    implements Factory<GetArtistDetailInteractor> {
  private final DomainModule module;

  private final Provider<ArtistRepository> artistRepositoryProvider;

  public DomainModule_ProvideArtistDetailInteractorFactory(
      DomainModule module, Provider<ArtistRepository> artistRepositoryProvider) {
    this.module = module;
    this.artistRepositoryProvider = artistRepositoryProvider;
  }

  @Override
  public GetArtistDetailInteractor get() {
    return Preconditions.checkNotNull(
        module.provideArtistDetailInteractor(artistRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DomainModule_ProvideArtistDetailInteractorFactory create(
      DomainModule module, Provider<ArtistRepository> artistRepositoryProvider) {
    return new DomainModule_ProvideArtistDetailInteractorFactory(module, artistRepositoryProvider);
  }

  public static GetArtistDetailInteractor proxyProvideArtistDetailInteractor(
      DomainModule instance, ArtistRepository artistRepository) {
    return Preconditions.checkNotNull(
        instance.provideArtistDetailInteractor(artistRepository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
