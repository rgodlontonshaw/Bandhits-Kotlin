// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.rklambo.bandhits.data.lastfm.LastFmRequestInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Cache;
import okhttp3.OkHttpClient;

public final class DataModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final DataModule module;

  private final Provider<Cache> cacheProvider;

  private final Provider<LastFmRequestInterceptor> interceptorProvider;

  public DataModule_ProvideOkHttpClientFactory(
      DataModule module,
      Provider<Cache> cacheProvider,
      Provider<LastFmRequestInterceptor> interceptorProvider) {
    this.module = module;
    this.cacheProvider = cacheProvider;
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkHttpClient(cacheProvider.get(), interceptorProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DataModule_ProvideOkHttpClientFactory create(
      DataModule module,
      Provider<Cache> cacheProvider,
      Provider<LastFmRequestInterceptor> interceptorProvider) {
    return new DataModule_ProvideOkHttpClientFactory(module, cacheProvider, interceptorProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      DataModule instance, Cache cache, LastFmRequestInterceptor interceptor) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(cache, interceptor),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
