// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di.subcomponent.album;

import com.rklambo.bandhits.domain.interactor.GetAlbumDetailInteractor;
import com.rklambo.bandhits.domain.interactor.base.Bus;
import com.rklambo.bandhits.domain.interactor.base.InteractorExecutor;
import com.rklambo.bandhits.ui.entity.mapper.AlbumDetailDataMapper;
import com.rklambo.bandhits.ui.presenter.AlbumPresenter;
import com.rklambo.bandhits.ui.view.AlbumView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class AlbumActivityModule_ProvideAlbumPresenterFactory
    implements Factory<AlbumPresenter> {
  private final AlbumActivityModule module;

  private final Provider<AlbumView> viewProvider;

  private final Provider<Bus> busProvider;

  private final Provider<GetAlbumDetailInteractor> albumInteractorProvider;

  private final Provider<InteractorExecutor> interactorExecutorProvider;

  private final Provider<AlbumDetailDataMapper> albumDetailDataMapperProvider;

  public AlbumActivityModule_ProvideAlbumPresenterFactory(
      AlbumActivityModule module,
      Provider<AlbumView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetAlbumDetailInteractor> albumInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<AlbumDetailDataMapper> albumDetailDataMapperProvider) {
    this.module = module;
    this.viewProvider = viewProvider;
    this.busProvider = busProvider;
    this.albumInteractorProvider = albumInteractorProvider;
    this.interactorExecutorProvider = interactorExecutorProvider;
    this.albumDetailDataMapperProvider = albumDetailDataMapperProvider;
  }

  @Override
  public AlbumPresenter get() {
    return Preconditions.checkNotNull(
        module.provideAlbumPresenter(
            viewProvider.get(),
            busProvider.get(),
            albumInteractorProvider.get(),
            interactorExecutorProvider.get(),
            albumDetailDataMapperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static AlbumActivityModule_ProvideAlbumPresenterFactory create(
      AlbumActivityModule module,
      Provider<AlbumView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetAlbumDetailInteractor> albumInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<AlbumDetailDataMapper> albumDetailDataMapperProvider) {
    return new AlbumActivityModule_ProvideAlbumPresenterFactory(
        module,
        viewProvider,
        busProvider,
        albumInteractorProvider,
        interactorExecutorProvider,
        albumDetailDataMapperProvider);
  }

  public static AlbumPresenter proxyProvideAlbumPresenter(
      AlbumActivityModule instance,
      AlbumView view,
      Bus bus,
      GetAlbumDetailInteractor albumInteractor,
      InteractorExecutor interactorExecutor,
      AlbumDetailDataMapper albumDetailDataMapper) {
    return Preconditions.checkNotNull(
        instance.provideAlbumPresenter(
            view, bus, albumInteractor, interactorExecutor, albumDetailDataMapper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
