// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.rklambo.bandhits.data.lastfm.LastFmRequestInterceptor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DataModule_ProvideRequestInterceptorFactory
    implements Factory<LastFmRequestInterceptor> {
  private final DataModule module;

  private final Provider<String> apiKeyProvider;

  private final Provider<Integer> cacheDurationProvider;

  public DataModule_ProvideRequestInterceptorFactory(
      DataModule module, Provider<String> apiKeyProvider, Provider<Integer> cacheDurationProvider) {
    this.module = module;
    this.apiKeyProvider = apiKeyProvider;
    this.cacheDurationProvider = cacheDurationProvider;
  }

  @Override
  public LastFmRequestInterceptor get() {
    return Preconditions.checkNotNull(
        module.provideRequestInterceptor(apiKeyProvider.get(), cacheDurationProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DataModule_ProvideRequestInterceptorFactory create(
      DataModule module, Provider<String> apiKeyProvider, Provider<Integer> cacheDurationProvider) {
    return new DataModule_ProvideRequestInterceptorFactory(
        module, apiKeyProvider, cacheDurationProvider);
  }

  public static LastFmRequestInterceptor proxyProvideRequestInterceptor(
      DataModule instance, String apiKey, int cacheDuration) {
    return Preconditions.checkNotNull(
        instance.provideRequestInterceptor(apiKey, cacheDuration),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
