// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di.subcomponent.detail;

import com.rklambo.bandhits.domain.interactor.GetArtistDetailInteractor;
import com.rklambo.bandhits.domain.interactor.GetTopAlbumsInteractor;
import com.rklambo.bandhits.domain.interactor.base.Bus;
import com.rklambo.bandhits.domain.interactor.base.InteractorExecutor;
import com.rklambo.bandhits.ui.entity.mapper.ArtistDetailDataMapper;
import com.rklambo.bandhits.ui.entity.mapper.ImageTitleDataMapper;
import com.rklambo.bandhits.ui.presenter.ArtistPresenter;
import com.rklambo.bandhits.ui.view.ArtistView;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ArtistActivityModule_ProvideActivityPresenterFactory
    implements Factory<ArtistPresenter> {
  private final ArtistActivityModule module;

  private final Provider<ArtistView> viewProvider;

  private final Provider<Bus> busProvider;

  private final Provider<GetArtistDetailInteractor> artistDetailInteractorProvider;

  private final Provider<GetTopAlbumsInteractor> topAlbumsInteractorProvider;

  private final Provider<InteractorExecutor> interactorExecutorProvider;

  private final Provider<ArtistDetailDataMapper> detailDataMapperProvider;

  private final Provider<ImageTitleDataMapper> imageTitleDataMapperProvider;

  public ArtistActivityModule_ProvideActivityPresenterFactory(
      ArtistActivityModule module,
      Provider<ArtistView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetArtistDetailInteractor> artistDetailInteractorProvider,
      Provider<GetTopAlbumsInteractor> topAlbumsInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<ArtistDetailDataMapper> detailDataMapperProvider,
      Provider<ImageTitleDataMapper> imageTitleDataMapperProvider) {
    this.module = module;
    this.viewProvider = viewProvider;
    this.busProvider = busProvider;
    this.artistDetailInteractorProvider = artistDetailInteractorProvider;
    this.topAlbumsInteractorProvider = topAlbumsInteractorProvider;
    this.interactorExecutorProvider = interactorExecutorProvider;
    this.detailDataMapperProvider = detailDataMapperProvider;
    this.imageTitleDataMapperProvider = imageTitleDataMapperProvider;
  }

  @Override
  public ArtistPresenter get() {
    return Preconditions.checkNotNull(
        module.provideActivityPresenter(
            viewProvider.get(),
            busProvider.get(),
            artistDetailInteractorProvider.get(),
            topAlbumsInteractorProvider.get(),
            interactorExecutorProvider.get(),
            detailDataMapperProvider.get(),
            imageTitleDataMapperProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ArtistActivityModule_ProvideActivityPresenterFactory create(
      ArtistActivityModule module,
      Provider<ArtistView> viewProvider,
      Provider<Bus> busProvider,
      Provider<GetArtistDetailInteractor> artistDetailInteractorProvider,
      Provider<GetTopAlbumsInteractor> topAlbumsInteractorProvider,
      Provider<InteractorExecutor> interactorExecutorProvider,
      Provider<ArtistDetailDataMapper> detailDataMapperProvider,
      Provider<ImageTitleDataMapper> imageTitleDataMapperProvider) {
    return new ArtistActivityModule_ProvideActivityPresenterFactory(
        module,
        viewProvider,
        busProvider,
        artistDetailInteractorProvider,
        topAlbumsInteractorProvider,
        interactorExecutorProvider,
        detailDataMapperProvider,
        imageTitleDataMapperProvider);
  }

  public static ArtistPresenter proxyProvideActivityPresenter(
      ArtistActivityModule instance,
      ArtistView view,
      Bus bus,
      GetArtistDetailInteractor artistDetailInteractor,
      GetTopAlbumsInteractor topAlbumsInteractor,
      InteractorExecutor interactorExecutor,
      ArtistDetailDataMapper detailDataMapper,
      ImageTitleDataMapper imageTitleDataMapper) {
    return Preconditions.checkNotNull(
        instance.provideActivityPresenter(
            view,
            bus,
            artistDetailInteractor,
            topAlbumsInteractor,
            interactorExecutor,
            detailDataMapper,
            imageTitleDataMapper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
