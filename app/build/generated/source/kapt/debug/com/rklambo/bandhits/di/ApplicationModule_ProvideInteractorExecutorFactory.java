// Generated by Dagger (https://google.github.io/dagger).
package com.rklambo.bandhits.di;

import com.birbit.android.jobqueue.JobManager;
import com.rklambo.bandhits.domain.interactor.base.Bus;
import com.rklambo.bandhits.domain.interactor.base.InteractorExecutor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ApplicationModule_ProvideInteractorExecutorFactory
    implements Factory<InteractorExecutor> {
  private final ApplicationModule module;

  private final Provider<JobManager> jobManagerProvider;

  private final Provider<Bus> busProvider;

  public ApplicationModule_ProvideInteractorExecutorFactory(
      ApplicationModule module,
      Provider<JobManager> jobManagerProvider,
      Provider<Bus> busProvider) {
    this.module = module;
    this.jobManagerProvider = jobManagerProvider;
    this.busProvider = busProvider;
  }

  @Override
  public InteractorExecutor get() {
    return Preconditions.checkNotNull(
        module.provideInteractorExecutor(jobManagerProvider.get(), busProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApplicationModule_ProvideInteractorExecutorFactory create(
      ApplicationModule module,
      Provider<JobManager> jobManagerProvider,
      Provider<Bus> busProvider) {
    return new ApplicationModule_ProvideInteractorExecutorFactory(
        module, jobManagerProvider, busProvider);
  }

  public static InteractorExecutor proxyProvideInteractorExecutor(
      ApplicationModule instance, JobManager jobManager, Bus bus) {
    return Preconditions.checkNotNull(
        instance.provideInteractorExecutor(jobManager, bus),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
